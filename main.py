import streamlit as st
import pandas as pd
import sys
import random
from streamlit_folium import folium_static
import folium

# Ajouter le chemin du projet pour importer les modules
sys.path.append('src')

from load_bike_station import load_bike_station_data
from balance_analysis import classify_station_balance
from route_optimizer import create_nancy_graph, find_best_station
from map_utils import create_nancy_map, add_bike_stations_to_map, add_driver_position, add_route_to_map, add_map_legend

def load_data() -> pd.DataFrame:
    """
    Charge les donn√©es des stations de v√©los.
    """
    stations_df = load_bike_station_data()

    if stations_df.empty:
        st.error("√âchec du chargement des donn√©es des stations de v√©los. Veuillez v√©rifier la cl√© API ou la connexion Internet.")
    else:
        if 'number' in stations_df.columns:
            stations_df = stations_df.rename(columns={'number': 'id'})
        elif 'id' not in stations_df.columns:
            stations_df = stations_df.reset_index().rename(columns={'index': 'id'})
    return stations_df

def get_random_position_in_nancy():
    """
    Returns random coordinates within Nancy, France.
    """
    # Approximate coordinates boundaries of Nancy, France
    lat = random.uniform(48.65, 48.72)
    lon = random.uniform(6.15, 6.20)
    return lat, lon

def main():
    # Configuration de la page Streamlit
    st.set_page_config(page_title="Nancy Bike Station Rebalancing", layout="wide")

    # Titre et description de l'application
    st.title("üö¥‚Äç‚ôÇÔ∏è R√©√©quilibrage des Stations de V√©los √† Nancy üö¥‚Äç‚ôÄÔ∏è")
    st.markdown("""
        Cette application vous aide √† g√©rer les stations de v√©los √† Nancy en r√©√©quilibrant les stations surcharg√©es et sous-aliment√©es en temps r√©el.
        Suivez les √©tapes suivantes pour obtenir un itin√©raire optimis√© :
        1. **Affichage des Stations :** Visualisez les stations de v√©los sur la carte.
        2. **Localisation du Conducteur :** La position du conducteur est g√©n√©r√©e al√©atoirement √† Nancy.
        3. **Action √† Entreprendre :** S√©lectionnez l'action (Collecter ou D√©poser des v√©los).
        4. **Calculer l'Itin√©raire :** Obtenez l'itin√©raire optimis√©.
        5. **Visualiser l'Itin√©raire :** Visualisez l'itin√©raire sur la carte avec les d√©tails.
    """)

    # Charger et classer les donn√©es des stations
    stations_df = load_data()
    if not stations_df.empty:
        stations_df = classify_station_balance(stations_df)

        # Position al√©atoire du conducteur dans Nancy
        driver_coords = get_random_position_in_nancy()

        # Cr√©er la carte initiale avec les stations et la position du conducteur
        nancy_map = create_nancy_map()
        nancy_map = add_bike_stations_to_map(stations_df, nancy_map)
        nancy_map = add_driver_position(nancy_map, driver_coords)

        # Afficher la carte initiale avec les stations
        st.header("üó∫Ô∏è Carte des Stations de V√©los et Position du Conducteur")
        folium_static(nancy_map, width=950, height=650)

        # Choix de l'action (menu d√©roulant en fran√ßais)
        action = st.selectbox("S√©lectionner l'action", ("Collecter", "D√©poser"))

        # Bouton pour calculer l'itin√©raire
        if st.button("‚ú® Calculer l'itin√©raire"):
            with st.spinner("Calcul en cours..."):
                try:
                    # Cr√©er le graphe r√©seau routier de Nancy
                    G = create_nancy_graph()
                    best_action = find_best_station(G, driver_coords, stations_df, 'collect' if action == 'Collecter' else 'deposit')

                    if best_action:
                        # Cr√©er la carte avec l'itin√©raire
                        nancy_map = create_nancy_map()
                        nancy_map = add_bike_stations_to_map(stations_df, nancy_map)
                        nancy_map = add_driver_position(nancy_map, driver_coords)

                        # Ajouter l'itin√©raire √† la carte
                        nancy_map = add_route_to_map(nancy_map, G, best_action['path'], color='blue' if action == 'Collecter' else 'green')

                        # Ajouter la l√©gende √† la carte
                        nancy_map = add_map_legend(nancy_map)

                        # Afficher la carte mise √† jour avec l'itin√©raire
                        st.header("üõ£Ô∏è Carte avec Itin√©raire Optimis√©")
                        folium_static(nancy_map, width=960, height=600)

                        # Afficher les d√©tails de la station
                        st.subheader("üìÑ D√©tails de la Station S√©lectionn√©e")
                        station_name = best_action['station_name'].split(' - ', 1)[-1] if ' - ' in best_action['station_name'] else best_action['station_name']
                        st.write(f"**Station:** {station_name}")
                        st.write(f"**Action:** {action}")
                        st.write(f"**Distance:** {best_action['distance_m']:.2f} m√®tres")
                        st.write(f"**Nombre de v√©los dans la station:** {best_action['bikes']}")

                        st.success("Itin√©raire optimis√© calcul√© avec succ√®s ! üéâ")
                    else:
                        st.info(f"Aucune station appropri√©e trouv√©e pour l'action '{action}'.")
                except Exception as e:
                    st.error(f"Une erreur est survenue lors du calcul de l'itin√©raire : {e}")

if __name__ == "__main__":
    main()
