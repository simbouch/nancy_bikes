# main.py

import streamlit as st
import pandas as pd
import sys
from geopy.geocoders import Nominatim
from streamlit_folium import folium_static
import folium

# Ajouter le chemin du projet pour importer les modules
sys.path.append('src')  # Assurez-vous que le chemin est correct

from load_bike_station import load_bike_station_data
from balance_analysis import classify_station_balance
from route_optimizer import create_nancy_graph, find_best_station
from map_utils import create_nancy_map, add_bike_stations_to_map, add_driver_position, add_route_to_map, add_map_legend

def load_data() -> pd.DataFrame:
    """
    Charge les donn√©es des stations de v√©los.

    Returns:
        pd.DataFrame: DataFrame contenant les donn√©es des stations de v√©los.
    """
    stations_df = load_bike_station_data()

    if stations_df.empty:
        st.error("√âchec du chargement des donn√©es des stations de v√©los. Veuillez v√©rifier la cl√© API ou la connexion Internet.")
    else:
        # Si l'API fournit des identifiants uniques, utilisez-les. Sinon, cr√©ez-les.
        if 'number' in stations_df.columns:
            stations_df = stations_df.rename(columns={'number': 'id'})
        elif 'id' not in stations_df.columns:
            stations_df = stations_df.reset_index().rename(columns={'index': 'id'})
    return stations_df

def main():
    # Configuration de la page Streamlit
    st.set_page_config(page_title="Nancy Bike Station Rebalancing", layout="wide")

    # Titre et description de l'application
    st.title("üö¥‚Äç‚ôÇÔ∏è R√©√©quilibrage des Stations de V√©los √† Nancy üö¥‚Äç‚ôÄÔ∏è")
    st.markdown("""
        Cette application vous aide √† g√©rer les stations de v√©los √† Nancy en r√©√©quilibrant les stations surcharg√©es et sous-aliment√©es en temps r√©el.
        Suivez les √©tapes suivantes pour obtenir un itin√©raire optimis√© :
        1. **Affichage des Stations :** Visualisez les stations de v√©los sur la carte.
        2. **Localisation du Conducteur :** Entrez votre position actuelle.
        3. **Action √† Entreprendre :** S√©lectionnez l'action (collecter ou d√©poser des v√©los).
        4. **Calculer l'Itin√©raire :** Obtenez l'itin√©raire optimis√©.
        5. **Visualiser l'Itin√©raire :** Visualisez l'itin√©raire sur la carte avec les d√©tails.
    """)

    # Charger et classer les donn√©es des stations
    stations_df = load_data()
    if not stations_df.empty:
        stations_df = classify_station_balance(stations_df)

        # Cr√©er la carte et ajouter les stations
        nancy_map = create_nancy_map()
        nancy_map = add_bike_stations_to_map(stations_df, nancy_map)

        # Localisation du conducteur
        st.sidebar.header("üìç Localisation du Conducteur")
        geolocator = Nominatim(user_agent="nancy_bike_app")
        default_location = geolocator.geocode("Nancy, France")
        if default_location:
            driver_lat, driver_lng = default_location.latitude, default_location.longitude
        else:
            st.sidebar.error("Impossible de localiser Nancy, France.")
            driver_lat, driver_lng = 48.6844, 6.1844  # Coordonn√©es de repli

        # Options d'entr√©e manuelle pour latitude et longitude
        driver_lat = st.sidebar.number_input("Latitude", value=driver_lat, format="%.6f")
        driver_lng = st.sidebar.number_input("Longitude", value=driver_lng, format="%.6f")
        driver_coords = (driver_lat, driver_lng)

        # Ajouter la position du conducteur √† la carte
        nancy_map = add_driver_position(nancy_map, driver_coords)

        # Afficher la carte avec les stations et la position du conducteur
        st.header("üó∫Ô∏è Carte des Stations de V√©los et Position du Conducteur")
        folium_static(nancy_map, width=700, height=500)

        # Choix de l'action
        st.sidebar.header("üîÑ Action √† Entreprendre")
        action = st.sidebar.selectbox("S√©lectionner l'action", ("collect", "deposit"))

        # Calculer les itin√©raires de r√©√©quilibrage
        st.sidebar.header("üìà Calculer l'Itin√©raire")
        if st.sidebar.button("‚ú® Calculer l'itin√©raire"):
            with st.spinner("Calcul en cours..."):
                try:
                    # Cr√©er le graphe r√©seau routier de Nancy
                    G = create_nancy_graph()
                    best_action = find_best_station(G, driver_coords, stations_df, action)

                    if best_action:
                        # Ajouter l'itin√©raire √† la carte
                        nancy_map = add_route_to_map(nancy_map, G, best_action['path'], color='blue' if action == 'collect' else 'green')
                        # Ajouter la l√©gende √† la carte
                        nancy_map = add_map_legend(nancy_map)
                        # Afficher la carte mise √† jour avec l'itin√©raire
                        st.header("üõ£Ô∏è Carte avec Itin√©raire Optimis√©")
                        folium_static(nancy_map, width=700, height=500)

                        # Afficher les d√©tails de l'itin√©raire
                        st.header("üìÑ D√©tails de l'Itin√©raire")
                        col1, col2 = st.columns(2)
                        with col1:
                            # Retirer le code de la station du nom
                            station_name = best_action['station_name'].split(' - ', 1)[-1] if ' - ' in best_action['station_name'] else best_action['station_name']
                            st.markdown(f"### **Station:** {station_name}")
                            st.markdown(f"### **Action:** {'Collecter' if action == 'collect' else 'D√©poser'}")
                        with col2:
                            st.markdown(f"### **Distance:** {best_action['distance_m']:.2f} m√®tres")
                            st.markdown(f"### **V√©los:** {best_action['bikes']}")

                        # Afficher un r√©sum√©
                        st.success("Itin√©raire optimis√© calcul√© avec succ√®s ! üéâ")
                    else:
                        st.info(f"Aucune station appropri√©e trouv√©e pour l'action '{'Collecter' if action == 'collect' else 'D√©poser'}'.")
                except Exception as e:
                    st.error(f"Une erreur est survenue lors du calcul de l'itin√©raire : {e}")

if __name__ == "__main__":
    main()
